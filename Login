<!DOCTYPE html>
<html lang="fa" dir="rtl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ورود / ثبت‌نام - مشق‌یار</title>
    <link href="https://fonts.googleapis.com/css2?family=Vazirmatn:wght@300;400;500;700;900&display=swap" rel="stylesheet">
    <style>
        :root {
            --primary: #4361ee;
            --primary-light: #4cc9f0;
            --secondary: #3a0ca3;
            --accent: #f72585;
            --success: #4cc9f0;
            --warning: #f8961e;
            --danger: #ef476f;
            --dark: #03071e;
            --dark-card: #1d3557;
            --dark-border: rgba(255, 255, 255, 0.1);
            --light: #f8f9fa;
            --light-card: #ffffff;
            --light-border: rgba(0, 0, 0, 0.1);
            --text-dark: #212529;
            --text-light: #f8f9fa;
            --shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
            --radius: 16px;
            --transition: all 0.3s ease;
        }
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
            font-family: 'Vazirmatn', sans-serif;
        }
        body {
            background: linear-gradient(135deg, var(--dark) 0%, var(--secondary) 100%);
            color: var(--text-light);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 20px;
        }
        .auth-container {
            width: 100%;
            max-width: 450px;
        }
        .auth-card {
            background: var(--dark-card);
            border-radius: var(--radius);
            box-shadow: var(--shadow);
            overflow: hidden;
            transition: var(--transition);
        }
        .auth-header {
            padding: 30px;
            text-align: center;
            border-bottom: 1px solid var(--dark-border);
        }
        .logo {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 12px;
            margin-bottom: 15px;
        }
        .logo-icon {
            width: 50px;
            height: 50px;
            border-radius: 12px;
            background: linear-gradient(135deg, var(--primary), var(--primary-light));
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            font-size: 24px;
            color: white;
            box-shadow: 0 4px 10px rgba(67, 97, 238, 0.4);
        }
        .logo h1 {
            font-size: 28px;
            font-weight: 700;
        }
        .tagline {
            font-size: 16px;
            opacity: 0.8;
        }
        .auth-body {
            padding: 30px;
        }
        .form-group {
            margin-bottom: 25px;
        }
        .form-label {
            display: block;
            margin-bottom: 10px;
            font-weight: 500;
            font-size: 16px;
        }
        .form-control {
            width: 100%;
            padding: 15px 20px;
            border-radius: 10px;
            border: 1px solid var(--dark-border);
            background: rgba(255, 255, 255, 0.05);
            color: var(--text-light);
            font-size: 16px;
            transition: var(--transition);
        }
        .form-control:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(67, 97, 238, 0.2);
        }
        .btn {
            padding: 15px 20px;
            border-radius: 10px;
            border: none;
            font-weight: 600;
            font-size: 16px;
            cursor: pointer;
            transition: var(--transition);
            display: inline-flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
            width: 100%;
        }
        .btn-primary {
            background: linear-gradient(135deg, var(--primary), var(--primary-light));
            color: white;
        }
        .btn-secondary {
            background: rgba(255, 255, 255, 0.1);
            color: var(--text-light);
        }
        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        }
        .auth-footer {
            text-align: center;
            padding: 20px;
            font-size: 14px;
            opacity: 0.7;
        }
        .notification {
            position: fixed;
            bottom: 20px;
            left: 20px;
            background: var(--dark-card);
            color: var(--text-light);
            padding: 15px 20px;
            border-radius: 10px;
            box-shadow: var(--shadow);
            display: flex;
            align-items: center;
            gap: 10px;
            z-index: 1000;
            transform: translateY(100px);
            opacity: 0;
            transition: var(--transition);
            max-width: 300px;
        }
        .notification.show {
            transform: translateY(0);
            opacity: 1;
        }
        .notification-icon {
            font-size: 20px;
        }
        .notification-close {
            margin-right: auto;
            background: none;
            border: none;
            color: inherit;
            cursor: pointer;
            font-size: 16px;
        }
        .step-indicator {
            display: flex;
            justify-content: center;
            margin-bottom: 30px;
        }
        .step {
            width: 30px;
            height: 30px;
            border-radius: 50%;
            background: rgba(255, 255, 255, 0.1);
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 10px;
            font-weight: 600;
        }
        .step.active {
            background: var(--primary);
        }
        .step.completed {
            background: var(--success);
        }
        .step-line {
            width: 50px;
            height: 2px;
            background: rgba(255, 255, 255, 0.1);
            align-self: center;
        }
        .step-line.completed {
            background: var(--success);
        }
        .timer {
            text-align: center;
            margin-top: 15px;
            font-size: 14px;
            opacity: 0.8;
        }
        .resend-code {
            text-align: center;
            margin-top: 15px;
        }
        .resend-code button {
            background: none;
            border: none;
            color: var(--primary-light);
            cursor: pointer;
            font-size: 14px;
            text-decoration: underline;
        }
        .resend-code button:disabled {
            color: rgba(255, 255, 255, 0.4);
            cursor: not-allowed;
            text-decoration: none;
        }
        .password-strength {
            margin-top: 5px;
            font-size: 12px;
            height: 5px;
            border-radius: 3px;
            background: rgba(255, 255, 255, 0.1);
            overflow: hidden;
        }
        .password-strength-meter {
            height: 100%;
            border-radius: 3px;
            transition: var(--transition);
        }
        .strength-weak {
            width: 33%;
            background: var(--danger);
        }
        .strength-medium {
            width: 66%;
            background: var(--warning);
        }
        .strength-strong {
            width: 100%;
            background: var(--success);
        }
    </style>
</head>
<body>
    <div class="auth-container">
        <div class="auth-card">
            <div class="auth-header">
                <div class="logo">
                    <div class="logo-icon">م</div>
                    <h1>مشق‌یار</h1>
                </div>
                <div class="tagline">یادآور تکالیف دانش‌آموزی</div>
            </div>
            <div class="auth-body">
                <div class="step-indicator">
                    <div class="step active" id="step1">1</div>
                    <div class="step-line" id="line1"></div>
                    <div class="step" id="step2">2</div>
                    <div class="step-line" id="line2"></div>
                    <div class="step" id="step3">3</div>
                </div>
                
                <!-- Step 1: Email -->
                <div id="emailStep">
                    <div class="form-group">
                        <label class="form-label">ایمیل</label>
                        <input type="email" id="emailInput" class="form-control" placeholder="example@email.com" required>
                    </div>
                    <button id="sendCodeBtn" class="btn btn-primary">ارسال کد تایید</button>
                </div>
                
                <!-- Step 2: Code -->
                <div id="codeStep" style="display: none;">
                    <div class="form-group">
                        <label class="form-label">کد تایید</label>
                        <input type="text" id="codeInput" class="form-control" placeholder="کد ۶ رقمی را وارد کنید" required>
                    </div>
                    <button id="verifyCodeBtn" class="btn btn-primary">تایید کد</button>
                    <div class="timer" id="timer"></div>
                    <div class="resend-code">
                        <button id="resendBtn" disabled>ارسال مجدد کد</button>
                    </div>
                    <div class="form-group" style="margin-top: 20px;">
                        <button id="backToEmailBtn" class="btn btn-secondary">بازگشت</button>
                    </div>
                </div>
                
                <!-- Step 3: Username and Password -->
                <div id="credentialsStep" style="display: none;">
                    <div class="form-group">
                        <label class="form-label">نام کاربری</label>
                        <input type="text" id="usernameInput" class="form-control" placeholder="نام کاربری خود را وارد کنید" required>
                    </div>
                    <div class="form-group">
                        <label class="form-label">رمز عبور</label>
                        <input type="password" id="passwordInput" class="form-control" placeholder="رمز عبور خود را وارد کنید" required>
                        <div class="password-strength">
                            <div id="passwordStrengthMeter" class="password-strength-meter"></div>
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="form-label">تکرار رمز عبور</label>
                        <input type="password" id="confirmPasswordInput" class="form-control" placeholder="رمز عبور را تکرار کنید" required>
                    </div>
                    <button id="registerBtn" class="btn btn-primary">ثبت نام</button>
                    <div class="form-group" style="margin-top: 20px;">
                        <button id="backToCodeBtn" class="btn btn-secondary">بازگشت</button>
                    </div>
                </div>
            </div>
            <div class="auth-footer">
                با ورود یا ثبت‌نام، شما شرایط استفاده و حریم خصوصی مشق‌یار را می‌پذیرید.
            </div>
        </div>
    </div>

    <div class="notification" id="notification">
        <span class="notification-icon">✓</span>
        <span class="notification-message">پیام با موفقیت ثبت شد</span>
        <button class="notification-close">×</button>
    </div>

    <!-- EmailJS SDK -->
    <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/@emailjs/browser@3/dist/email.min.js"></script>
    
    <script>
        // Initialize EmailJS with your Public Key (User ID)
        // Replace with your actual Public Key
        emailjs.init("T-5X8_-0SGsNydhCC"); 
        
        // Database configuration
        const binId = '68bde82bd0ea881f40754203';
        const apiKey = '$2a$10$YR9AtXxahMeBzb8ZwetACu/3i39glB0rP3WZYfue.bMGF4U9Rv1vu';
        
        // DOM elements
        const emailStep = document.getElementById('emailStep');
        const codeStep = document.getElementById('codeStep');
        const credentialsStep = document.getElementById('credentialsStep');
        const emailInput = document.getElementById('emailInput');
        const codeInput = document.getElementById('codeInput');
        const usernameInput = document.getElementById('usernameInput');
        const passwordInput = document.getElementById('passwordInput');
        const confirmPasswordInput = document.getElementById('confirmPasswordInput');
        const passwordStrengthMeter = document.getElementById('passwordStrengthMeter');
        const sendCodeBtn = document.getElementById('sendCodeBtn');
        const verifyCodeBtn = document.getElementById('verifyCodeBtn');
        const registerBtn = document.getElementById('registerBtn');
        const backToEmailBtn = document.getElementById('backToEmailBtn');
        const backToCodeBtn = document.getElementById('backToCodeBtn');
        const resendBtn = document.getElementById('resendBtn');
        const timerElement = document.getElementById('timer');
        const step1 = document.getElementById('step1');
        const step2 = document.getElementById('step2');
        const step3 = document.getElementById('step3');
        const line1 = document.getElementById('line1');
        const line2 = document.getElementById('line2');
        
        // State
        let currentUser = null;
        let currentCode = null;
        let timerInterval = null;
        let timeLeft = 120; // 2 minutes
        
        // Show notification
        function showNotification(message, duration = 3000) {
            const notification = document.getElementById('notification');
            document.querySelector('.notification-message').textContent = message;
            notification.classList.add('show');
            
            setTimeout(() => {
                notification.classList.remove('show');
            }, duration);
        }
        
        // Close notification
        document.querySelector('.notification-close').addEventListener('click', () => {
            document.getElementById('notification').classList.remove('show');
        });
        
        // Generate random 6-digit code
        function generateCode() {
            return Math.floor(100000 + Math.random() * 900000).toString();
        }
        
        // Start timer
        function startTimer() {
            timeLeft = 120; // Reset to 2 minutes
            resendBtn.disabled = true;
            
            clearInterval(timerInterval);
            timerInterval = setInterval(() => {
                timeLeft--;
                const minutes = Math.floor(timeLeft / 60);
                const seconds = timeLeft % 60;
                timerElement.textContent = `زمان باقی‌مانده: ${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;
                
                if (timeLeft <= 0) {
                    clearInterval(timerInterval);
                    timerElement.textContent = 'زمان شما به پایان رسید';
                    resendBtn.disabled = false;
                }
            }, 1000);
        }
        
        // Send code to email using EmailJS
        async function sendCode() {
            const email = emailInput.value.trim();
            
            if (!email) {
                showNotification('لطفاً ایمیل خود را وارد کنید', 2000);
                return;
            }
            
            if (!validateEmail(email)) {
                showNotification('لطفاً یک ایمیل معتبر وارد کنید', 2000);
                return;
            }
            
            try {
                // Generate a new code
                currentCode = generateCode();
                
                // Send email using EmailJS
                const templateParams = {
                    to_email: email,
                    code: currentCode,
                    from_name: 'مشق‌یار'
                };
                
                // Replace with your actual Service ID and Template ID
                await emailjs.send('MashqYarLog', 'template_pruhnhy', templateParams);
                
                // Check if user exists in database
                const userExists = await checkUserExists(email);
                
                if (!userExists) {
                    // Create new user with temporary data
                    await createUser(email, currentCode);
                } else {
                    // Update user's code
                    await updateUserCode(email, currentCode);
                }
                
                // Move to code step
                emailStep.style.display = 'none';
                codeStep.style.display = 'block';
                
                // Update step indicator
                step1.classList.add('completed');
                step1.classList.remove('active');
                step2.classList.add('active');
                line1.classList.add('completed');
                
                // Start timer
                startTimer();
                
                showNotification('کد تایید به ایمیل شما ارسال شد', 3000);
                
            } catch (error) {
                console.error('Error sending code:', error);
                showNotification('خطا در ارسال کد تایید', 2000);
            }
        }
        
        // Verify code
        async function verifyCode() {
            const code = codeInput.value.trim();
            
            if (!code) {
                showNotification('لطفاً کد تایید را وارد کنید', 2000);
                return;
            }
            
            if (code === currentCode) {
                // Code is correct
                showNotification('کد تایید صحیح است', 2000);
                
                // Check if user has completed registration
                if (currentUser && currentUser.username && currentUser.password) {
                    // User already registered, log in
                    localStorage.setItem('mashqyar_user', JSON.stringify(currentUser));
                    setTimeout(() => {
                        window.location.href = 'index.html';
                    }, 1500);
                } else {
                    // Move to credentials step
                    codeStep.style.display = 'none';
                    credentialsStep.style.display = 'block';
                    
                    // Update step indicator
                    step2.classList.add('completed');
                    step2.classList.remove('active');
                    step3.classList.add('active');
                    line2.classList.add('completed');
                    
                    // Clear timer
                    clearInterval(timerInterval);
                }
            } else {
                showNotification('کد تایید نادرست است', 2000);
            }
        }
        
        // Register user with username and password
        async function registerUser() {
            const username = usernameInput.value.trim();
            const password = passwordInput.value;
            const confirmPassword = confirmPasswordInput.value;
            
            if (!username) {
                showNotification('لطفاً نام کاربری خود را وارد کنید', 2000);
                return;
            }
            
            if (!password) {
                showNotification('لطفاً رمز عبور خود را وارد کنید', 2000);
                return;
            }
            
            if (password !== confirmPassword) {
                showNotification('رمز عبور و تکرار آن یکسان نیستند', 2000);
                return;
            }
            
            if (password.length < 6) {
                showNotification('رمز عبور باید حداقل ۶ کاراکتر باشد', 2000);
                return;
            }
            
            try {
                // Hash the password (simple hash for demo)
                const hashedPassword = await hashPassword(password);
                
                // Update user with username and password
                await updateUserCredentials(currentUser.email, username, hashedPassword);
                
                // Save user to localStorage
                localStorage.setItem('mashqyar_user', JSON.stringify(currentUser));
                
                showNotification('ثبت نام با موفقیت انجام شد', 2000);
                
                // Redirect to main app
                setTimeout(() => {
                    window.location.href = 'index.html';
                }, 1500);
                
            } catch (error) {
                console.error('Error registering user:', error);
                showNotification('خطا در ثبت نام', 2000);
            }
        }
        
        // Simple password hashing function (for demo purposes)
        async function hashPassword(password) {
            // In a real application, use a proper hashing library like bcrypt
            const encoder = new TextEncoder();
            const data = encoder.encode(password);
            const hashBuffer = await crypto.subtle.digest('SHA-256', data);
            const hashArray = Array.from(new Uint8Array(hashBuffer));
            const hashHex = hashArray.map(b => b.toString(16).padStart(2, '0')).join('');
            return hashHex;
        }
        
        // Update password strength meter
        function updatePasswordStrength(password) {
            let strength = 0;
            
            // Length check
            if (password.length >= 6) strength += 1;
            if (password.length >= 10) strength += 1;
            
            // Complexity checks
            if (/[A-Z]/.test(password)) strength += 1; // Uppercase letters
            if (/[a-z]/.test(password)) strength += 1; // Lowercase letters
            if (/[0-9]/.test(password)) strength += 1; // Numbers
            if (/[^A-Za-z0-9]/.test(password)) strength += 1; // Special characters
            
            // Update the meter
            passwordStrengthMeter.className = 'password-strength-meter';
            
            if (strength <= 2) {
                passwordStrengthMeter.classList.add('strength-weak');
            } else if (strength <= 4) {
                passwordStrengthMeter.classList.add('strength-medium');
            } else {
                passwordStrengthMeter.classList.add('strength-strong');
            }
        }
        
        // Back to email step
        function backToEmail() {
            codeStep.style.display = 'none';
            emailStep.style.display = 'block';
            
            // Reset step indicator
            step1.classList.add('active');
            step1.classList.remove('completed');
            step2.classList.remove('active');
            line1.classList.remove('completed');
            
            // Clear timer
            clearInterval(timerInterval);
        }
        
        // Back to code step
        function backToCode() {
            credentialsStep.style.display = 'none';
            codeStep.style.display = 'block';
            
            // Reset step indicator
            step2.classList.add('active');
            step2.classList.remove('completed');
            step3.classList.remove('active');
            line2.classList.remove('completed');
        }
        
        // Resend code
        async function resendCode() {
            resendBtn.disabled = true;
            const email = emailInput.value.trim();
            
            try {
                // Generate a new code
                currentCode = generateCode();
                
                // Send email using EmailJS
                const templateParams = {
                    to_email: email,
                    code: currentCode,
                    from_name: 'مشق‌یار'
                };
                
                await emailjs.send('YOUR_SERVICE_ID', 'YOUR_TEMPLATE_ID', templateParams);
                
                // Update user's code
                await updateUserCode(email, currentCode);
                
                // Start timer again
                startTimer();
                
                showNotification('کد تایید جدید به ایمیل شما ارسال شد', 3000);
                
            } catch (error) {
                console.error('Error resending code:', error);
                showNotification('خطا در ارسال مجدد کد', 2000);
                resendBtn.disabled = false;
            }
        }
        
        // Validate email format
        function validateEmail(email) {
            const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            return re.test(email);
        }
        
        // Check if user exists in database
        async function checkUserExists(email) {
            try {
                const response = await fetch(`https://api.jsonbin.io/v3/b/${binId}/latest`, {
                    headers: {
                        'X-Master-Key': apiKey
                    }
                });
                
                const data = await response.json();
                const users = data.record.data || []; // Changed from .users to .data
                
                const user = users.find(u => u.email === email);
                
                if (user) {
                    currentUser = user;
                    return true;
                }
                
                return false;
            } catch (error) {
                console.error('Error checking user existence:', error);
                throw error;
            }
        }
        
        // Create new user
        async function createUser(email, code) {
            try {
                // Get current data
                const response = await fetch(`https://api.jsonbin.io/v3/b/${binId}/latest`, {
                    headers: {
                        'X-Master-Key': apiKey
                    }
                });
                
                const data = await response.json();
                const binData = data.record;
                
                // Initialize data array if it doesn't exist
                if (!binData.data) {
                    binData.data = [];
                }
                
                // Create new user
                const newUser = {
                    id: Date.now().toString(),
                    email: email,
                    code: code,
                    createdAt: new Date().toISOString()
                };
                
                binData.data.push(newUser); // Changed from .users to .data
                currentUser = newUser;
                
                // Save to database
                await fetch(`https://api.jsonbin.io/v3/b/${binId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Master-Key': apiKey
                    },
                    body: JSON.stringify(binData)
                });
                
            } catch (error) {
                console.error('Error creating user:', error);
                throw error;
            }
        }
        
        // Update user's code
        async function updateUserCode(email, code) {
            try {
                // Get current data
                const response = await fetch(`https://api.jsonbin.io/v3/b/${binId}/latest`, {
                    headers: {
                        'X-Master-Key': apiKey
                    }
                });
                
                const data = await response.json();
                const binData = data.record;
                
                // Find user and update code
                const userIndex = binData.data.findIndex(u => u.email === email); // Changed from .users to .data
                
                if (userIndex !== -1) {
                    binData.data[userIndex].code = code;
                    binData.data[userIndex].updatedAt = new Date().toISOString();
                    
                    // Save to database
                    await fetch(`https://api.jsonbin.io/v3/b/${binId}`, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-Master-Key': apiKey
                        },
                        body: JSON.stringify(binData)
                    });
                }
                
            } catch (error) {
                console.error('Error updating user code:', error);
                throw error;
            }
        }
        
        // Update user's credentials
        async function updateUserCredentials(email, username, password) {
            try {
                // Get current data
                const response = await fetch(`https://api.jsonbin.io/v3/b/${binId}/latest`, {
                    headers: {
                        'X-Master-Key': apiKey
                    }
                });
                
                const data = await response.json();
                const binData = data.record;
                
                // Find user and update credentials
                const userIndex = binData.data.findIndex(u => u.email === email); // Changed from .users to .data
                
                if (userIndex !== -1) {
                    binData.data[userIndex].username = username;
                    binData.data[userIndex].password = password;
                    binData.data[userIndex].registeredAt = new Date().toISOString();
                    
                    // Update current user
                    currentUser = binData.data[userIndex];
                    
                    // Save to database
                    await fetch(`https://api.jsonbin.io/v3/b/${binId}`, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-Master-Key': apiKey
                        },
                        body: JSON.stringify(binData)
                    });
                }
                
            } catch (error) {
                console.error('Error updating user credentials:', error);
                throw error;
            }
        }
        
        // Event listeners
        sendCodeBtn.addEventListener('click', sendCode);
        verifyCodeBtn.addEventListener('click', verifyCode);
        registerBtn.addEventListener('click', registerUser);
        backToEmailBtn.addEventListener('click', backToEmail);
        backToCodeBtn.addEventListener('click', backToCode);
        resendBtn.addEventListener('click', resendCode);
        
        // Password strength meter
        passwordInput.addEventListener('input', () => {
            updatePasswordStrength(passwordInput.value);
        });
        
        // Handle Enter key in inputs
        emailInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                sendCode();
            }
        });
        
        codeInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                verifyCode();
            }
        });
        
        confirmPasswordInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                registerUser();
            }
        });
    </script>
</body>
</html>
